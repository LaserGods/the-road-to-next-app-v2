generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Organization {
    id          String       @id @default(cuid())
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    name        String
    memberships Membership[]
    tickets     Ticket[]
}

model Membership {
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String

    joinedAt       DateTime       @default(now())
    isActive       Boolean
    membershipRole MembershipRole @default(MEMBER)

    @@id(name: "membershipId", [organizationId, userId])
    @@index([organizationId])
    @@index([userId])
}

enum MembershipRole {
    ADMIN
    MEMBER
}

model User {
    id                      String                   @id @default(cuid())
    username                String                   @unique
    email                   String                   @unique
    passwordHash            String
    emailVerified           Boolean                  @default(false)
    sessions                Session[]
    passwordResetTokens     PasswordResetToken[]
    emailVerificationTokens EmailVerificationToken[]
    memberships             Membership[]
    tickets                 Ticket[]
    comments                Comment[]
}

model EmailVerificationToken {
    id        String   @id @default(cuid())
    code      String
    expiresAt DateTime
    email     String
    userId    String
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@index([userId])
}

model PasswordResetToken {
    tokenHash String   @id
    expiresAt DateTime
    userId    String
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@index([userId])
}

model Session {
    id        String   @id
    expiresAt DateTime
    userId    String
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@index([userId])
}

model Ticket {
    id             String       @id @default(cuid())
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    title          String
    content        String       @db.VarChar(1024)
    status         TicketStatus @default(OPEN)
    deadline       String
    bounty         Int
    userId         String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    comments       Comment[]

    @@index([userId])
    @@index([organizationId])
}

enum TicketStatus {
    OPEN
    IN_PROGRESS
    DONE
}

model Comment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String   @db.Text
    ticketId  String
    ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
    userId    String?
    user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@index([ticketId])
    @@index([userId])
}
